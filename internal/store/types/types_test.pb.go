// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/store/types/types_test.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TestObject is a mock object used to test the store
type TestObject struct {
	// TestPrimaryKey is a primary key
	TestPrimaryKey []byte `protobuf:"bytes,1,opt,name=TestPrimaryKey,proto3" json:"TestPrimaryKey,omitempty"`
	// TestSecondaryKeyA is secondary key number one
	TestSecondaryKeyA []byte `protobuf:"bytes,2,opt,name=TestSecondaryKeyA,proto3" json:"TestSecondaryKeyA,omitempty"`
	// TestSecondaryKeyB is secondary key number two
	TestSecondaryKeyB []byte `protobuf:"bytes,3,opt,name=TestSecondaryKeyB,proto3" json:"TestSecondaryKeyB,omitempty"`
}

func (m *TestObject) Reset()         { *m = TestObject{} }
func (m *TestObject) String() string { return proto.CompactTextString(m) }
func (*TestObject) ProtoMessage()    {}
func (*TestObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9304612d08d2db, []int{0}
}
func (m *TestObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestObject.Merge(m, src)
}
func (m *TestObject) XXX_Size() int {
	return m.Size()
}
func (m *TestObject) XXX_DiscardUnknown() {
	xxx_messageInfo_TestObject.DiscardUnknown(m)
}

var xxx_messageInfo_TestObject proto.InternalMessageInfo

func (m *TestObject) GetTestPrimaryKey() []byte {
	if m != nil {
		return m.TestPrimaryKey
	}
	return nil
}

func (m *TestObject) GetTestSecondaryKeyA() []byte {
	if m != nil {
		return m.TestSecondaryKeyA
	}
	return nil
}

func (m *TestObject) GetTestSecondaryKeyB() []byte {
	if m != nil {
		return m.TestSecondaryKeyB
	}
	return nil
}

// TestStarname defines a starname used by crud_test.go
type TestStarname struct {
	// Owner is the owner of the Starname
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	// Domain references the domain to which account belongs
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty" yaml:"domain"`
	// Name is the name of the account
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,wktptr" json:"name,omitempty" yaml:"name"`
}

func (m *TestStarname) Reset()         { *m = TestStarname{} }
func (m *TestStarname) String() string { return proto.CompactTextString(m) }
func (*TestStarname) ProtoMessage()    {}
func (*TestStarname) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9304612d08d2db, []int{1}
}
func (m *TestStarname) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestStarname) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestStarname.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestStarname) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestStarname.Merge(m, src)
}
func (m *TestStarname) XXX_Size() int {
	return m.Size()
}
func (m *TestStarname) XXX_DiscardUnknown() {
	xxx_messageInfo_TestStarname.DiscardUnknown(m)
}

var xxx_messageInfo_TestStarname proto.InternalMessageInfo

func (m *TestStarname) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *TestStarname) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *TestStarname) GetName() *string {
	if m != nil {
		return m.Name
	}
	return nil
}

func init() {
	proto.RegisterType((*TestObject)(nil), "cosmosSdkCrud.internal.store.types.v1beta1.TestObject")
	proto.RegisterType((*TestStarname)(nil), "cosmosSdkCrud.internal.store.types.v1beta1.TestStarname")
}

func init() {
	proto.RegisterFile("internal/store/types/types_test.proto", fileDescriptor_6e9304612d08d2db)
}

var fileDescriptor_6e9304612d08d2db = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x4e, 0xe3, 0x30,
	0x14, 0xc6, 0xeb, 0xf9, 0x53, 0xa9, 0x6e, 0x67, 0x34, 0xcd, 0xcc, 0xa2, 0xaa, 0x46, 0xc9, 0x28,
	0xd2, 0x54, 0x80, 0xa8, 0xad, 0xc2, 0x02, 0x89, 0x1d, 0x41, 0xac, 0x58, 0x00, 0x29, 0x62, 0xc1,
	0x06, 0x39, 0x89, 0x09, 0xa1, 0x89, 0x1d, 0xd9, 0x4e, 0xab, 0xdc, 0xa2, 0x47, 0x60, 0xc9, 0x51,
	0x58, 0x76, 0xc9, 0xaa, 0xa0, 0xf6, 0x06, 0x3d, 0x01, 0x8a, 0x4d, 0x37, 0xd0, 0x8d, 0xe5, 0xf7,
	0xbd, 0xdf, 0xf7, 0xf4, 0xe9, 0xd9, 0xf0, 0x7f, 0xc2, 0x14, 0x15, 0x8c, 0xa4, 0x58, 0x2a, 0x2e,
	0x28, 0x56, 0x65, 0x4e, 0xa5, 0x39, 0x6f, 0x14, 0x95, 0x0a, 0xe5, 0x82, 0x2b, 0x6e, 0xed, 0x84,
	0x5c, 0x66, 0x5c, 0x0e, 0xa3, 0xd1, 0xb1, 0x28, 0x22, 0xb4, 0x36, 0x21, 0x6d, 0x42, 0x1a, 0x47,
	0xe3, 0x41, 0x40, 0x15, 0x19, 0x74, 0xff, 0xc4, 0x3c, 0xe6, 0xda, 0x86, 0xab, 0x9b, 0x99, 0xd0,
	0xb5, 0x63, 0xce, 0xe3, 0x94, 0x62, 0x5d, 0x05, 0xc5, 0x2d, 0x9e, 0x08, 0x92, 0xe7, 0x54, 0x48,
	0xd3, 0x77, 0xa7, 0x00, 0xc2, 0x4b, 0x2a, 0xd5, 0x59, 0x70, 0x4f, 0x43, 0x65, 0xf5, 0xe0, 0xcf,
	0xaa, 0x3a, 0x17, 0x49, 0x46, 0x44, 0x79, 0x4a, 0xcb, 0x0e, 0xf8, 0x07, 0xb6, 0x5a, 0xfe, 0x07,
	0xd5, 0xda, 0x85, 0xed, 0x4a, 0x19, 0xd2, 0x90, 0xb3, 0xc8, 0x68, 0x47, 0x9d, 0x2f, 0x1a, 0xfd,
	0xdc, 0xd8, 0x44, 0x7b, 0x9d, 0xaf, 0x9b, 0x69, 0xcf, 0x7d, 0x04, 0xb0, 0xa5, 0x55, 0x45, 0x04,
	0x23, 0x19, 0xb5, 0x7a, 0xf0, 0x3b, 0x9f, 0x30, 0x2a, 0x74, 0x96, 0x86, 0xf7, 0x6b, 0x35, 0x77,
	0x5a, 0x25, 0xc9, 0xd2, 0x43, 0x57, 0xcb, 0xae, 0x6f, 0xda, 0xd6, 0x36, 0xac, 0x47, 0x3c, 0x23,
	0x09, 0xd3, 0x49, 0x1a, 0x5e, 0x7b, 0x35, 0x77, 0x7e, 0x18, 0xd0, 0xe8, 0xae, 0xff, 0x0e, 0x58,
	0x27, 0xf0, 0x5b, 0x35, 0x5a, 0x87, 0x68, 0xee, 0xfd, 0x45, 0x66, 0x4b, 0x68, 0xbd, 0x25, 0x34,
	0x54, 0x22, 0x61, 0xf1, 0x15, 0x49, 0x0b, 0xea, 0xfd, 0x5e, 0xcd, 0x9d, 0xa6, 0x19, 0x53, 0x79,
	0xdc, 0x87, 0x17, 0x07, 0xf8, 0xda, 0xee, 0x5d, 0x3c, 0x2d, 0x6c, 0x30, 0x5b, 0xd8, 0xe0, 0x75,
	0x61, 0x83, 0xe9, 0xd2, 0xae, 0xcd, 0x96, 0x76, 0xed, 0x79, 0x69, 0xd7, 0xae, 0x0f, 0xe2, 0x44,
	0xdd, 0x15, 0x01, 0x0a, 0x79, 0x86, 0x13, 0x3e, 0xee, 0x73, 0x46, 0xb1, 0x79, 0xcc, 0xbe, 0x8c,
	0x46, 0xfd, 0x50, 0x14, 0x11, 0xde, 0xf4, 0x07, 0x82, 0xba, 0xce, 0xb0, 0xff, 0x16, 0x00, 0x00,
	0xff, 0xff, 0x15, 0xac, 0x65, 0xad, 0x22, 0x02, 0x00, 0x00,
}

func (m *TestObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestSecondaryKeyB) > 0 {
		i -= len(m.TestSecondaryKeyB)
		copy(dAtA[i:], m.TestSecondaryKeyB)
		i = encodeVarintTypesTest(dAtA, i, uint64(len(m.TestSecondaryKeyB)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TestSecondaryKeyA) > 0 {
		i -= len(m.TestSecondaryKeyA)
		copy(dAtA[i:], m.TestSecondaryKeyA)
		i = encodeVarintTypesTest(dAtA, i, uint64(len(m.TestSecondaryKeyA)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TestPrimaryKey) > 0 {
		i -= len(m.TestPrimaryKey)
		copy(dAtA[i:], m.TestPrimaryKey)
		i = encodeVarintTypesTest(dAtA, i, uint64(len(m.TestPrimaryKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestStarname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestStarname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestStarname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdStringMarshalTo(*m.Name, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdString(*m.Name):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTypesTest(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintTypesTest(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypesTest(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypesTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypesTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TestPrimaryKey)
	if l > 0 {
		n += 1 + l + sovTypesTest(uint64(l))
	}
	l = len(m.TestSecondaryKeyA)
	if l > 0 {
		n += 1 + l + sovTypesTest(uint64(l))
	}
	l = len(m.TestSecondaryKeyB)
	if l > 0 {
		n += 1 + l + sovTypesTest(uint64(l))
	}
	return n
}

func (m *TestStarname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypesTest(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovTypesTest(uint64(l))
	}
	if m.Name != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdString(*m.Name)
		n += 1 + l + sovTypesTest(uint64(l))
	}
	return n
}

func sovTypesTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypesTest(x uint64) (n int) {
	return sovTypesTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestPrimaryKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestPrimaryKey = append(m.TestPrimaryKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TestPrimaryKey == nil {
				m.TestPrimaryKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSecondaryKeyA", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestSecondaryKeyA = append(m.TestSecondaryKeyA[:0], dAtA[iNdEx:postIndex]...)
			if m.TestSecondaryKeyA == nil {
				m.TestSecondaryKeyA = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestSecondaryKeyB", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypesTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestSecondaryKeyB = append(m.TestSecondaryKeyB[:0], dAtA[iNdEx:postIndex]...)
			if m.TestSecondaryKeyB == nil {
				m.TestSecondaryKeyB = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestStarname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypesTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestStarname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestStarname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypesTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypesTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypesTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypesTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypesTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = new(string)
			}
			if err := github_com_gogo_protobuf_types.StdStringUnmarshal(m.Name, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypesTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypesTest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypesTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypesTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypesTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypesTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypesTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypesTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypesTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypesTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypesTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypesTest = fmt.Errorf("proto: unexpected end of group")
)
